// Code generated by protoc-gen-go.
// source: point.proto
// DO NOT EDIT!

/*
Package point is a generated protocol buffer package.

It is generated from these files:
	point.proto

It has these top-level messages:
	Point
	SetGoalRequest
	SetGoalResponse
	WatchRequest
	WatchResponse
	MoveRequest
	MoveResponse
	ChatRequest
	ChatResponse
*/
package point

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type SetGoalRequest struct {
	Position *Point `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
}

func (m *SetGoalRequest) Reset()                    { *m = SetGoalRequest{} }
func (m *SetGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*SetGoalRequest) ProtoMessage()               {}
func (*SetGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SetGoalRequest) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

type SetGoalResponse struct {
}

func (m *SetGoalResponse) Reset()                    { *m = SetGoalResponse{} }
func (m *SetGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*SetGoalResponse) ProtoMessage()               {}
func (*SetGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WatchRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WatchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WatchResponse struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Position *Point `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Score    bool   `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (m *WatchResponse) Reset()                    { *m = WatchResponse{} }
func (m *WatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()               {}
func (*WatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WatchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WatchResponse) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *WatchResponse) GetScore() bool {
	if m != nil {
		return m.Score
	}
	return false
}

type MoveRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Delta *Point `protobuf:"bytes,2,opt,name=delta" json:"delta,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MoveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MoveRequest) GetDelta() *Point {
	if m != nil {
		return m.Delta
	}
	return nil
}

type MoveResponse struct {
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ChatRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChatRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ChatResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *ChatResponse) Reset()                    { *m = ChatResponse{} }
func (m *ChatResponse) String() string            { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()               {}
func (*ChatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChatResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Point)(nil), "Point")
	proto.RegisterType((*SetGoalRequest)(nil), "SetGoalRequest")
	proto.RegisterType((*SetGoalResponse)(nil), "SetGoalResponse")
	proto.RegisterType((*WatchRequest)(nil), "WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "WatchResponse")
	proto.RegisterType((*MoveRequest)(nil), "MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "MoveResponse")
	proto.RegisterType((*ChatRequest)(nil), "ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "ChatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Game service

type GameClient interface {
	SetGoal(ctx context.Context, in *SetGoalRequest, opts ...grpc.CallOption) (*SetGoalResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Game_WatchClient, error)
	Move(ctx context.Context, opts ...grpc.CallOption) (Game_MoveClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Game_ChatClient, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) SetGoal(ctx context.Context, in *SetGoalRequest, opts ...grpc.CallOption) (*SetGoalResponse, error) {
	out := new(SetGoalResponse)
	err := grpc.Invoke(ctx, "/Game/SetGoal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Game_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Game_serviceDesc.Streams[0], c.cc, "/Game/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type gameWatchClient struct {
	grpc.ClientStream
}

func (x *gameWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Move(ctx context.Context, opts ...grpc.CallOption) (Game_MoveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Game_serviceDesc.Streams[1], c.cc, "/Game/Move", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameMoveClient{stream}
	return x, nil
}

type Game_MoveClient interface {
	Send(*MoveRequest) error
	CloseAndRecv() (*MoveResponse, error)
	grpc.ClientStream
}

type gameMoveClient struct {
	grpc.ClientStream
}

func (x *gameMoveClient) Send(m *MoveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameMoveClient) CloseAndRecv() (*MoveResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MoveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Game_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Game_serviceDesc.Streams[2], c.cc, "/Game/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameChatClient{stream}
	return x, nil
}

type Game_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type gameChatClient struct {
	grpc.ClientStream
}

func (x *gameChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Game service

type GameServer interface {
	SetGoal(context.Context, *SetGoalRequest) (*SetGoalResponse, error)
	Watch(*WatchRequest, Game_WatchServer) error
	Move(Game_MoveServer) error
	Chat(Game_ChatServer) error
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_SetGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/SetGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetGoal(ctx, req.(*SetGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).Watch(m, &gameWatchServer{stream})
}

type Game_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type gameWatchServer struct {
	grpc.ServerStream
}

func (x *gameWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_Move_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).Move(&gameMoveServer{stream})
}

type Game_MoveServer interface {
	SendAndClose(*MoveResponse) error
	Recv() (*MoveRequest, error)
	grpc.ServerStream
}

type gameMoveServer struct {
	grpc.ServerStream
}

func (x *gameMoveServer) SendAndClose(m *MoveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameMoveServer) Recv() (*MoveRequest, error) {
	m := new(MoveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Game_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).Chat(&gameChatServer{stream})
}

type Game_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type gameChatServer struct {
	grpc.ServerStream
}

func (x *gameChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGoal",
			Handler:    _Game_SetGoal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Game_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Move",
			Handler:       _Game_Move_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Game_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "point.proto",
}

func init() { proto.RegisterFile("point.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x31, 0x6f, 0xf2, 0x30,
	0x10, 0x95, 0x21, 0xe1, 0x83, 0x8b, 0x03, 0x7c, 0xa7, 0x0e, 0x28, 0xea, 0x80, 0x5c, 0x55, 0xcd,
	0x50, 0x59, 0x08, 0xd8, 0x3b, 0x74, 0x60, 0xaa, 0x54, 0xb9, 0x43, 0xa7, 0x0e, 0x29, 0xb5, 0x0a,
	0x12, 0xc4, 0x29, 0x76, 0x2b, 0xf8, 0x53, 0xfd, 0x8d, 0x95, 0xed, 0x14, 0x25, 0x14, 0x65, 0xbb,
	0x77, 0xb9, 0xf7, 0xee, 0xde, 0x8b, 0x21, 0x2a, 0xd4, 0x3a, 0x37, 0xbc, 0xd8, 0x29, 0xa3, 0xd8,
	0x15, 0x84, 0x8f, 0x16, 0x22, 0x05, 0xb2, 0x1f, 0x91, 0x31, 0x49, 0x43, 0x41, 0xf6, 0x16, 0x1d,
	0x46, 0x2d, 0x8f, 0x0e, 0x6c, 0x0e, 0xfd, 0x27, 0x69, 0x16, 0x2a, 0xdb, 0x08, 0xf9, 0xf1, 0x29,
	0xb5, 0x41, 0x06, 0xdd, 0x42, 0xe9, 0xb5, 0x59, 0xab, 0xdc, 0x91, 0xa2, 0x69, 0x87, 0x3b, 0x1d,
	0x71, 0xec, 0xb3, 0xff, 0x30, 0x38, 0xb2, 0x74, 0xa1, 0x72, 0x2d, 0x19, 0x03, 0xfa, 0x9c, 0x99,
	0xe5, 0xea, 0x57, 0x06, 0x21, 0xc8, 0xb3, 0xad, 0x74, 0x12, 0x3d, 0xe1, 0x6a, 0xf6, 0x02, 0x71,
	0x39, 0xe3, 0x49, 0xe7, 0x86, 0x6a, 0xfb, 0x5b, 0xe7, 0xf7, 0xe3, 0x05, 0x84, 0x7a, 0xa9, 0x76,
	0x72, 0xd4, 0x1e, 0x93, 0xb4, 0x2b, 0x3c, 0x60, 0x77, 0x10, 0x3d, 0xa8, 0x2f, 0xd9, 0x70, 0x01,
	0x5e, 0x42, 0xf8, 0x26, 0x37, 0x26, 0x3b, 0x51, 0xf6, 0x4d, 0xd6, 0x07, 0xea, 0x05, 0x4a, 0x4f,
	0x33, 0x88, 0xee, 0x57, 0x99, 0x69, 0x12, 0x1c, 0x42, 0x7b, 0xab, 0xdf, 0x9d, 0x5c, 0x4f, 0xd8,
	0x92, 0xcd, 0x81, 0x7a, 0x52, 0x83, 0xc7, 0x3f, 0xac, 0xe9, 0x37, 0x81, 0x60, 0x61, 0x3f, 0xdd,
	0xc2, 0xbf, 0x32, 0x5a, 0x1c, 0xf0, 0xfa, 0xaf, 0x49, 0x86, 0xfc, 0x24, 0x75, 0x4c, 0x21, 0x74,
	0x89, 0x62, 0xcc, 0xab, 0xe9, 0x27, 0x7d, 0x5e, 0x0b, 0x7a, 0x42, 0xf0, 0x1a, 0x02, 0xeb, 0x0d,
	0x29, 0xaf, 0x64, 0x94, 0xc4, 0xbc, 0x6a, 0x38, 0x25, 0x78, 0x03, 0x81, 0xbd, 0x1e, 0x29, 0xaf,
	0x38, 0x4f, 0x62, 0x5e, 0xb5, 0x94, 0x92, 0x09, 0x79, 0xed, 0xb8, 0x47, 0x36, 0xfb, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xcc, 0xfa, 0x4f, 0x73, 0x02, 0x00, 0x00,
}
